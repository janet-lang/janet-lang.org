{:title "Tuples"
 :template "docpage.html"}
---

Tuples are immutable, sequential types that are similar to arrays. They are
represented in source code with either parentheses or brackets surrounding
their items. Note that Janet differs from traditional Lisps here, which
commonly use the term "lists" to describe forms wrapped in parentheses. Like
all data structures, tuple contents can be retrieved with the @code`get`
function and their length retrieved with the @code`length` function.

The two most common ways to create a tuple are using the literal form with
bracket characters @code`[]` or calling the @code`tuple` function directly.

@codeblock[janet]```
# Four ways to create the same tuple:

(def mytup1 [1 2 3 4])       # using bracket literals
(def mytup2 (tuple 1 2 3 4)) # using the (tuple) function

# the quote prevents form evaluation and returns the tuple directly
(def mytup3 '(1 2 3 4))

# quasiquote works similarly to quote, but allows for some
# forms to be evaluated inside via the , character
(def mytup4 ~(1 2 3 ,(+ 2 2)))

# these all result in the same tuple:
(assert (= mytup1 mytup2 mytup3 mytup4)) # true
```

## As table keys

Tuples can be used as table keys because two tuples with the same contents are
considered equal:

@codeblock[janet]```
(def points @{[0 0] "A"
              [1 3] "B"
              [7 5] "C"})

(get points [0 0])       # "A"
(get points (tuple 0 0)) # "A"
(get points [1 3])       # "B"
(get points [8 5])       # nil (ie: not found)
```

## Sorting tuples

Tuples can also be used to sort items. When sorting tuples via the @code`<` or
@code`>` comparators, the first elements are compared first. If those elements
are equal, we move on to the second element, then the third, and so on. We
could use this property of tuples to sort all kind of data, or sort one array
by the contents of another array.

@codeblock[janet]```
(def inventory [
 ["ermie" 1]
 ["banana" 18]
 ["cat" 5]
 ["dog" 3]
 ["flamingo" 23]
 ["apple" 2]])

(def sorted-inventory (sorted inventory))

(each [item n] sorted-inventory (print item ": " n))
# apple: 2
# banana: 18
# cat: 5
# dog: 3
# ermie: 1
# flamingo: 23
```

## Bracketed tuples

Under the hood, there are two kinds of tuples - bracketed and non-bracketed:

@codeblock[janet]```
(def brackets '[1 2 3]) # same as (tuple/brackets 1 2 3)
(def parens '(1 2 3))   # same as (tuple 1 2 3)

# you can check the type with tuple/type:
(tuple/type brackets)
# :brackets
(tuple/type parens)
# :parens

# pp preserves bracketedness:
(pp brackets)
# [1 2 3]
(pp parens)
# (1 2 3)

# bracketed and non-bracketed tuples
# with the same contents are not equal:
(= '() '[])
# false
(= brackets parens)
# false

# non-bracketed tuples evaluate to function calls:
(eval parens)
# error
(eval (tuple '+ 2 4 6)) # same as (eval '(+ 2 4 6))
# 12

# bracketed tuples evaluate to non-bracketed ones:
(eval brackets)
# (1 2 3)
(eval (tuple/brackets '+ 2 4 6)) # same as (eval '[+ 2 4 6])
# (<function +> 2 4 6)
(eval (eval '[+ 2 4 6]))
# 12

# tuple literals evaluate to non-bracketed tuples too:
[4 5 6] # same as (eval '[4 5 6])
# (4 5 6)
```

In all other ways, bracketed tuples behave identically to normal tuples.

You should use bracketed tuples only in code that will be evaluated later
(for example in macros).

## More functions

Most functions in the core library that work on arrays also work on tuples, or
have an analogous function for tuples. See the @link[/api/tuple.html][Tuple API]
for a list of functions that operate on tuples.
