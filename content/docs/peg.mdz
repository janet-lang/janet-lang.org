{:title "Parsing Expression Grammars"
 :template "docpage.html"
 :order 16}
---

A common programming task is recognizing patterns in text, be it filtering
emails from a list or extracting data from a CSV file. Programming languages and
libraries usually offer a number of tools for this, including prebuilt parsers,
simple operations on strings (splitting a string on commas), and regular
expressions.  The pre-built or custom-built parser is usually the most robust
solution, but can be very complex to maintain and may not exist for many
languages. String functions are not powerful enough for a large class of
languages, and regular expressions can be hard to read (which characters are
escaped?) and under-powered (don't parse HTML with regex!).

PEGs, or Parsing Expression Grammars, are another formalism for recognizing
languages. PEGs are easier to write than a custom parser and more powerful than
regular expressions. They also can produce grammars that are easily
understandable and fast. PEGs can also be compiled to a bytecode format that can
be reused. Janet offers the @code`peg` module for writing and evaluating PEGs.

Janet's @code`peg` module borrows syntax and ideas from both LPeg and REBOL/Red
parse module. Janet has no built-in regex module because PEGs offer a superset
of the functionality of regular expressions.

Below is a simple example for checking if a string is a valid IP address. Notice
how the grammar is descriptive enough that you can read it even if you don't
know the PEG syntax (example is translated from a
@link[https://www.red-lang.org/2013/11/041-introducing-parse.html][RED language blog post]).

@codeblock[janet]```
(def ip-address
 '{:dig (range "09")
   :0-4 (range "04")
   :0-5 (range "05")
   :byte (choice
           (sequence "25" :0-5)
           (sequence "2" :0-4 :dig)
           (sequence "1" :dig :dig)
           (between 1 2 :dig))
   :main (sequence :byte "." :byte "." :byte "." :byte)})

(peg/match ip-address "0.0.0.0") # -> @[]
(peg/match ip-address "elephant") # -> nil
(peg/match ip-address "256.0.0.0") # -> nil
(peg/match ip-address "0.0.0.0more text") # -> @[]
```

## The API

The @code`peg` module has few functions because the complexity is exposed
through the pattern syntax. Note that there is only one match function,
@code`peg/match`. Variations on matching, such as parsing or searching, can be
implemented inside patterns.  PEGs can also be compiled ahead of time with
@code`peg/compile` if a PEG will be reused many times.

### @code`(peg/match peg text [,start=0] & arguments)`

Match a PEG against some text. Returns an array of captured data if the text
matches, or @code`nil` if there is no match. The caller can provide an optional
@code`start` index to begin matching, otherwise the PEG starts on the first
character of text. A PEG can either be a compiled PEG object or PEG source.

### @code`(peg/compile peg)`

Compiles a PEG source data structure into a new PEG. Throws an error if there
are problems with the PEG code.

## Primitive patterns

Larger patterns are built up with primitive patterns, which recognize individual
characters, string literals, or a given number of characters. A character in
Janet is considered a byte, so PEGs will work on any string of bytes. No special
meaning is given to the @code`0` byte, or the string terminator as in many
languages.

@tag[table]{
    @tr{@th{Pattern Signature}
        @th{What it matches}}

    @tr{@td{"cat" (a string)}
        @td{ The literal string. }}

    @tr{@td{3 (an integer)}
        @td{ 
		If positive, matches a number of characters, and advances that many characters.
		If 0, counts as an (empty string) match.
        If negative, matches if not that many characters and does not advance.
        For example, -1 will match the end of a string. }}

    @tr{@td{@code`(range "az" "AZ")` }
        @td{ Matches characters in a range and advances 1 character. Multiple
        ranges can be combined together. }}

    @tr{@td{@code`(set "abcd")`}
        @td{ Match any character in the argument string. Advances 1 character.
        }}

    @tr{@td{@code`true`}
        @td{ Always matches. Does not advance any characters. Epsilon in NFA.
        }}

    @tr{@td{@code`false`}
        @td{ Never matches. Does not advance any characters. Equivalent to
        @code`(! true)`.
        }}
}

Primitive patterns are not that useful by themselves, but can be passed to
@code`peg/match` and @code`peg/compile` like any other pattern.

@codeblock[janet]```
(peg/match "hello" "hello") # -> @[]
(peg/match "hello" "hi") # -> nil
(peg/match 1 "hi") # -> @[]
(peg/match 1 "") # -> nil
(peg/match '(range "AZ") "F") # -> @[]
(peg/match '(range "AZ") "-") # -> nil
(peg/match '(set "AZ") "F") # -> nil
(peg/match '(set "ABCDEFGHIJKLMNOPQRSTUVWXYZ") "F") # -> @[]
```

## Combining patterns

These primitive patterns can be combined with several combinators to match a
wide number of languages. These combinators can be thought of as the looping and
branching forms in a traditional language (that is how they are implemented when
compiled to bytecode).

@tag[table]{
    @tr{@th{Pattern Signature}
        @th{What it matches}}

    @tr{@td{@code`(choice a b c ...)` }
        @td{ Tries to match a, then b, and so on. Will succeed on the first
        successful match, and fails if none of the arguments match the text. }}

    @tr{@td{@code`(+ a b c ...)` }
        @td{ Alias for @code`(choice a b c ...)` }}

    @tr{@td{@code`(sequence a b c)` }
        @td{ Tries to match a, b, c and so on in sequence. If any of these
        arguments fail to match the text, the whole pattern fails. }}

    @tr{@td{@code`(* a b c ...)` }
        @td{ Alias for @code`(sequence a b c ...)` }}

    @tr{@td{@code`(any x)` }
        @td{ Matches 0 or more repetitions of x. }}

    @tr{@td{@code`(some x)` }
        @td{ Matches 1 or more repetitions of x. }}

    @tr{@td{@code`(between min max x)` }
        @td{ Matches between min and max (inclusive) repetitions of x. }}

    @tr{@td{@code`(at-least n x)` }
        @td{ Matches at least n repetitions of x. }}

    @tr{@td{@code`(at-most n x)` }
        @td{  Matches at most n repetitions of x. }}

    @tr{@td{@code`(repeat n x)` }
        @td{ Matches exactly n repetitions of x. }}

    @tr{@td{@code`(if cond patt)` }
        @td{ Tries to match patt only if cond matches as well. cond will not
        produce any captures. }}

    @tr{@td{@code`(if-not cond patt)` }
        @td{ Tries to match only if cond does not match. cond will not produce
        any captures. }}

    @tr{@td{@code`(not patt)` }
        @td{ Matches only if patt does not match. Will not produce captures or
        advance any characters. }}

    @tr{@td{@code`(! patt)` }
    @td{ Alias for @code`(not patt)` }}

    @tr{@td{@code`(look ?offset patt)` }
        @td{ Matches only if patt matches at a fixed offset. offset can be
             any integer and defaults to 0. The peg will not advance any
             characters. }}

    @tr{@td{@code`(> offset ?patt)` }
        @td{ Alias for @code`(look offset ?patt)` }}

    @tr{@td{@code`(to patt)` }
        @td{ Match up to patt (but not including it). If the end of the input
             is reached and patt is not matched, the entire pattern does not
             match. }}

    @tr{@td{@code`(thru patt)` }
        @td{ Match up through patt (thus including it). If the end of the
             input is reached and patt is not matched, the entire pattern
             does not match. }}

    @tr{@td{@code`(backmatch ?tag)` }
        @td{ If tag is provided, matches against the tagged capture.  If no
             tag is provided, matches against the last capture, but only if
             that capture is untagged.  The peg advances if there was a
             match.}}

    @tr{@td{@code`(opt patt)` }
        @td{ Alias for @code`(between 0 1 patt)` }}

    @tr{@td{@code`(? patt)` }
        @td{ Alias for @code`(between 0 1 patt)` }}

    @tr{@td{@code`(n patt)` }
        @td{ Alias for @code`(repeat n patt)` }}

    @tr{@td{@code`(sub window-patt patt)` }
        @td{ Match @code`window-patt`, and if it succeeds match
             @code`patt` against the bytes that @code`window-patt` matched.
             @code`patt` cannot match more than @code`window-patt`; it will
             see end-of-input at the end of the substring matched by
             @code`window-patt`. If @code`patt` also succeeds, @code`sub` will
             advance to the end of what @code`window-patt` matched. }}

    @tr{@td{@code`(split separator-patt patt)` }
        @td{ Split the remaining input by @code`separator-patt`, and execute
             @code`patt` on each substring. @code`patt` will execute with its
             input constrained to the next instance of @code`separator-patt`,
             as if narrowed by @code`(sub (to separator-patt) ...)`.
             @code`split` will continue to match separators and patterns until
             it reaches the end of the input; if you don't want to match to the
             end of the input you should first narrow it with
             @code`(sub ... (split ...))`. }}}

PEGs try to match an input text with a pattern in a greedy manner.  This means
that if a rule fails to match, that rule will fail and not try again. The only
backtracking provided in a PEG is provided by the @code`(choice x y z ...)`
special, which will try rules in order until one succeeds, and the whole pattern
succeeds. If no sub-pattern succeeds, then the whole pattern fails. Note that
this means that the order of @code`x y z` in choice @strong{does} matter. If
@code`y` matches everything that @code`z` matches, @code`z` will never succeed.

## Captures

So far we have only been concerned with "does this text match this language?".
This is useful, but it is often more useful to extract data from text if it does
match a PEG. The @code`peg` module uses the concept of a capture stack to
extract data from text. As the PEG is trying to match a piece of text, some
forms may push Janet values onto the capture stack as a side effect. If the text
matches the main PEG language, @code`(peg/match)` will return the final capture
stack as an array.

Capture specials will only push captures to the capture stack if their child
pattern matches the text.  Most captures specials will match the same text as
their first argument pattern. In addition, most specials that produce captures
can take an optional argument @code`tag` that applies a keyword tag to the
capture.  These tagged captures can then be recaptured via the @code`(backref
tag)` special in subsequent matches.  Tagged captures, when combined with the
@code`(cmt)` special, provide a powerful form of look-behind that can make many
grammars simpler.

@tag[table]{
    @tr{@th{Pattern Signature}
        @th{What it matches}}

    @tr{@td{@code`(capture patt ?tag)` }
        @td{ Captures all of the text in patt if patt matches. If patt contains
        any captures, then those captures will be pushed on to the capture
        stack before the total text. }}

    @tr{@td{@code`(<- patt ?tag)` }
        @td{ Alias for @code`(capture patt ?tag)` }}

    @tr{@td{@code`(quote patt ?tag)` }
        @td{ Another alias for @code`(capture patt ?tag)`. This allows code
        like @code`'patt` to capture a pattern. }}

    @tr{@td{@code`(group patt ?tag) ` }
        @td{ Captures an array of all of the captures in patt. }}

    @tr{@td{@code`(replace patt subst ?tag)` }
        @td{ Replaces the captures produced by patt by applying subst to them.
        If subst is a table or struct, will push @code`(get subst last-capture)`
        to the capture stack after removing the old captures. If subst is a
        function, will call subst with the captures of patt as arguments and
        push the result to the capture stack. Otherwise, will push subst
        literally to the capture stack. }}

    @tr{@td{@code`(/ patt subst ?tag)` }
        @td{ Alias for @code`(replace patt subst ?tag)` }}

    @tr{@td{@code`(constant k ?tag)` }
        @td{ Captures a constant value and advances no characters. }}

    @tr{@td{@code`(argument n ?tag)` }
        @td{ Captures the nth extra argument to the match function and does not
        advance. }}

    @tr{@td{@code`(position ?tag)` }
        @td{ Captures the current index into the text and advances no input. }}

    @tr{@td{@code`($ ?tag)` }
        @td{ Alias for @code`(position ?tag)`. }}

    @tr{@td{@code`(column ?tag)` }
        @td{ Captures the column number of the current position in the matched
        text. }}

    @tr{@td{@code`(line ?tag)` }
        @td{ Captures the line number of the current position in the matched
        text. }}

    @tr{@td{@code`(accumulate patt ?tag)` }
        @td{ Capture a string that is the concatenation of all captures in patt.
        This will try to be efficient and not create intermediate strings if
        possible. }}

    @tr{@td{@code`(% patt ?tag)` }
        @td{ Alias for @code`(accumulate patt ?tag)` }}

    @tr{@td{@code`(cmt patt fun ?tag)` }
        @td{ Invokes fun with all of the captures of patt as arguments (if patt
        matches). If the result is truthy, then captures the result. The whole
        expression fails if fun returns false or nil. }}

    @tr{@td{@code`(backref tag ?tag)` }
        @td{ Duplicates the last capture with the tag @code`tag`. If no such
        capture exists then the match fails. }}

    @tr{@td{@code`(-> tag ?tag)` }
        @td{ Alias for @code`(backref tag)`. }}

    @tr{@td{@code`(unref patt ?tag)` }
        @td{Lets a user "scope" tagged captures.
        After the rule has matched, all captures with the given tag can no longer be
        referred to by their tag. However, such captures from outside
        rule are kept as is. If no tag is given, all tagged captures from rule
        are unreferenced. Note that this doesn't drop the captures, merely
        removes their association with the tag. This means subsequent calls to
        backref and backmatch will no longer "see" these tagged captures. }}

    @tr{@td{@code`(error ?patt)` }
        @td{ Throws a Janet error.  If optional argument @code`patt` is
        provided and it matches successfully, the error thrown will be the
        last capture of @code`patt`, or a generic error if @code`patt`
        produces no captures. If no argument is provided, a generic error is
        thrown. If @code`patt` does not match, no error will be thrown.
        }}

    @tr{@td{@code`(drop patt)` }
        @td{ Ignores (drops) all captures from patt. }}

    @tr{@td{@code`(only-tags patt)` }
        @td{ Ignores all captures from @code`patt`, while making tagged
        captures within @code`patt` available for future back-referencing. }}

    @tr{@td{@code`(nth index patt ?tag)` }
        @td{ Capture one of the captures in @code`patt` at @code`index`.
        If no such capture exists, then the match fails. }}

    @tr{@td{@code`(uint num-bytes ?tag)` }
        @td{ Capture a little endian, unsigned, two's complement integer from 
        @code`num-bytes`. Works for 1 to 8 byte integers. }}

    @tr{@td{@code`(uint-be num-bytes ?tag)` }
        @td{ Capture a big endian, unsigned, two's complement integer from 
        @code`num-bytes`. Works for 1 to 8 byte integers. }}

    @tr{@td{@code`(int num-bytes ?tag)` }
        @td{ Capture a little endian, signed, two's complement integer from 
        @code`num-bytes`. Works for 1 to 8 byte integers. }}

    @tr{@td{@code`(int-be num-bytes ?tag)` }
        @td{ Capture a big endian, signed, two's complement integer from 
        @code`num-bytes`. Works for 1 to 8 byte integers. }}

    @tr{@td{@code`(lenprefix n patt)` }
        @td{ Matches n repetitions of a pattern, where n is supplied from other
        parsed input and is not a constant. }}

    @tr{@td{@code`(number patt ?base ?tag)` }
        @td{ Capture a number parsed from the matched pattern. This uses the
         same parser as Janet itself, so it supports all numeric notation
         allowed in Janet files. To tag the capture without forcing a
         particular base, use @code`(number patt nil :tag)`. }}}

## Grammars and recursion

The feature that makes PEGs so much more powerful than pattern matching
solutions like (vanilla) regex is mutual recursion.  To do recursion in a PEG,
you can wrap multiple patterns in a grammar, which is a Janet struct. The
patterns must be named by keywords, which can then be used in all sub-patterns
in the grammar.

Each grammar, defined by a struct, must also have a main rule, called
@code`:main`, that is the pattern that the entire grammar is defined by.

An example grammar that uses mutual recursion:

@codeblock[janet]```
(def my-grammar
 '{:a (* "a" :b "a")
   :b (* "b" (+ :a 0) "b")
   :main (* "(" :b ")")})

(peg/match my-grammar "(bb)") # -> @[]
(peg/match my-grammar "(babbab)") # -> @[]
(peg/match my-grammar "(baab)") # -> nil
(peg/match my-grammar "(babaabab)") # -> nil
```

Keep in mind that recursion is implemented with a stack, meaning that very
recursive grammars can overflow the stack. The compiler is able to turn some
recursion into iteration via tail-call optimization, but some patterns may fail
on large inputs. It is also possible to construct (very poorly written) patterns
that will result in long loops and be very slow in general.

## Built-in patterns

Besides the primitive patterns and pattern combinators given above, the
@code`peg` module also provides a default grammar with a handful of commonly
used patterns. All of these shorthands can be defined with the combinators above
and primitive patterns, but you may see these aliases in other grammars and they
can make grammars simpler and easier to read.

@tag[table]{
    @tr{@th{Name} @th{Expanded} @th{Description}}
    @tr{@td{@code`:d`} @td{@code`(range "09")`} @td{Matches an ASCII digit.}}
    @tr{@td{@code`:a`} @td{@code`(range "az" "AZ")`} @td{Matches an ASCII letter.}}
    @tr{@td{@code`:w`} @td{@code`(range "az" "AZ" "09")`} @td{Matches an ASCII digit or letter.}}
    @tr{@td{@code`:s`} @td{@code`(set " \t\r\n\0\f\v")`} @td{Matches an ASCII whitespace character.}}
    @tr{@td{@code`:h`} @td{@code`(range "09" "af" "AF")`} @td{Matches a hex character.}}

    @tr{@td{@code`:D`} @td{@code`(if-not :d 1)`} @td{Matches a character that is not an ASCII digit.}}
    @tr{@td{@code`:A`} @td{@code`(if-not :a 1)`} @td{Matches a character that is not an ASCII letter.}}
    @tr{@td{@code`:W`} @td{@code`(if-not :w 1)`} @td{Matches a character that is not an ASCII digit or letter.}}
    @tr{@td{@code`:S`} @td{@code`(if-not :s 1)`} @td{Matches a character that is not ASCII whitespace.}}
    @tr{@td{@code`:H`} @td{@code`(if-not :h 1)`} @td{Matches a character that is not a hex character.}}

    @tr{@td{@code`:d+`} @td{@code`(some :d)`} @td{Matches 1 or more ASCII digits.}}
    @tr{@td{@code`:a+`} @td{@code`(some :a)`} @td{Matches 1 or more ASCII letters.}}
    @tr{@td{@code`:w+`} @td{@code`(some :w)`} @td{Matches 1 or more ASCII digits and letters.}}
    @tr{@td{@code`:s+`} @td{@code`(some :s)`} @td{Matches 1 or more ASCII whitespace characters.}}
    @tr{@td{@code`:h+`} @td{@code`(some :h)`} @td{Matches 1 or more hex characters.}}

    @tr{@td{@code`:d*`} @td{@code`(any :d)`} @td{Matches 0 or more ASCII digits.}}
    @tr{@td{@code`:a*`} @td{@code`(any :a)`} @td{Matches 0 or more ASCII letters.}}
    @tr{@td{@code`:w*`} @td{@code`(any :w)`} @td{Matches 0 or more ASCII digits and letters.}}
    @tr{@td{@code`:s*`} @td{@code`(any :s)`} @td{Matches 0 or more ASCII whitespace characters.}}
    @tr{@td{@code`:h*`} @td{@code`(any :h)`} @td{Matches 0 or more hex characters.}}
}

All of these aliases are defined in @code`default-peg-grammar`, which is a table
that maps from the alias name to the expanded form. You can even add your own
aliases here which are then available for all PEGs in the program. Modifiying
this table will not affect already compiled PEGs.

## String searching and other idioms

Although all pattern matching is done in anchored mode, operations like global
substitution and searching can be implemented with the PEG module. A simple
Janet function that produces PEGs that search for strings shows how captures and
looping specials can be composed, and how quasiquoting can be used to embed values
in patterns.

@codeblock[janet]```
(defn finder
 "Creates a peg that finds all locations of str in the text."
 [str]
 (peg/compile ~(any (+ (* ($) ,str) 1))))

(def where-are-the-dogs? (finder "dog"))

(peg/match where-are-the-dogs? "dog dog cat dog") # -> @[0 4 12]

# Our finder function also works on any pattern, not just strings.

(def find-cats (finder '(* "c" (some "a") "t")))

(peg/match find-cats "cat ct caat caaaaat cat") # -> @[0 7 12 20]
```

We can also wrap a PEG to turn it into a global substitution grammar with the
accumulate special @code`(%)`.

@codeblock[janet]```
(defn replacer
 "Creates a peg that replaces instances of patt with subst."
 [patt subst]
 (peg/compile ~(% (any (+ (/ (<- ,patt) ,subst) (<- 1))))))
```
