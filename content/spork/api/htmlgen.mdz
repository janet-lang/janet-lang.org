(import ../../gen-docs :as gen-docs)
(import spork/htmlgen :export true)
(setdyn :source-linker (partial gen-docs/github-source-linker "janet-lang/spork" gen-docs/spork-version))
(setdyn :no-community-examples true)

{:title "htmlgen"
 :author "Calvin Rose"
 :license "MIT"
 :template "docpage.html"}
---

HTMLgen is a rendering engine that can render plain data structures into
an HTML string. Its API has only one constant and two functions:

@ul{
  @li{constant @code`doctype` is a string with html5 doctype header}
  @li{function  @code`raw` returns the function that will add the raw string, passed as an argument to the function, to the output, when rendered, without any escaping.}
  @li{function @code`html` has one required argument @code`data` with the data structure rendered into bytes with HTML code. And optional @code`buf` to which function renders final bytes. If you do not provide the @code`buf`, it will create a new one.} }

## Rules for rendering data structures

Example:

@codeblock[janet]```
(use spork/htmlgen)
(defn append-year [buf] (buffer/push buf (string ((os/date) :year))))
(html
  @[[:head
    @[[:meta {:charset "htf-8"}]
      [:title "Spork"]]]
    [:body
      @[[:header "Menu"]
        [:main [:section "News"]]
        [:footer "All right reserved " append-year]]]])

=>  @"<head><meta charset=\"htf-8\"/><title>Spork</title></head><body><header>Menu</header><main><section>News</section></main><footer>All right reserved 2022</footer></body>"
```

We will show how HTMLgen renders from the data structure by dissecting
the example above:

@ul{
  @li{`array` (and @code`fiber` which is not in the example) each member of
    the sequence renders by one of these rules.}
  @li{@code`tuple` represents the HTML tag. The first member must be the name of
    the HTML tag. The second member can be a dictionary with HTML attributes
    for the HTML tag. All the other members are children of the tag and renders
    according to these rules.}
  @li{@code`string`, @code`buffer`, @code`number` and @code`boolean` coerces to string and,
    if necessary, escaped and pushed to the buffer.}
  @li{@code`function` gets the buffer, with which it can do whatever it wants to,
    presumably push some more content, but anything.}
  @li{@code`nil` do not do anything to the buffer.}
}

As you may see, the rules are straightforward, yet with the @code`fiber` and @code`function` types you have pretty endless possibilities when constructing the HTML code from data structures.

## Reference

@gen-docs/gen-prefix-current[htmlgen/]
