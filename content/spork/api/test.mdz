(import ../../gen-docs :as gen-docs)
(import spork/test :export true)
(setdyn :source-linker (partial gen-docs/github-source-linker "janet-lang/spork" gen-docs/spork-version))
(setdyn :no-community-examples true)

{:title "test"
 :author "Calvin Rose"
 :license "MIT"
 :template "docpage.html"}
---

This module contains a simple test helper when you do not need a specialized
library.

## Examples

### assert

Modified version of `assert`, with some nice error handling.

@codeblock[janet]```
(test/assert false "How is this?")
# => ✘ How is this?
(test/assert true "OK")
# => ✔true
```


### assert-not

Invert assert.

@codeblock[janet]```
(test/assert-not false "OK")
# => ✔true
```


### assert-error

Test passes if forms throw errors.

@codeblock[janet]```
(test/assert-error "To err is natural" (error "Bad"))
# => ✔true
```


### assert-no-error

Test passes if forms throw errors.

@codeblock[janet]```
(test/assert-no-error "To not err is desired" (do "Good"))
# => ✔true
```


### start-suite

Starts test suite, which counts all and passed tests.


### end-suite

Ends test suite, prints summary and exits if any have failed.


### All together

Example of simple test suite.

@codeblock[janet]```
(import spork/test)

(test/start-suite 0)

(test/assert true "is always true")
(test/assert-not false "is always false")
(test/assert-error "To err is natural" (error "Bad"))
(test/assert-no-error "To not err is desired" (do "Good"))

(test/end-suite)

# =>

Test suite 0 finished in 0.000 soconds
4 of 4 tests passed.
```


### timeit

Time code execution using os/clock, and print the result.
Returns the value of the timed expression.

@codeblock[janet]```
repl> (test/timeit (sum (seq [i :range [1 1000000]] (math/sqrt i))))
Elapsed time: 0.0718288 seconds
6.66666e+08
```


### capture-stdout

Runs the body and captures stdout. Returns tuple with result and captured
stdout in string.

@codeblock[janet]```
(capture-stdout
  (print "Interesting output")
  true)
# => (true "Interesting output")
```


### capture-stderr

Runs the body and captures stderr. Returns tuple with result and captured
stderr in string.

@codeblock[janet]```
(capture-stderr
  (print "Interesting output")
  true)
# => (true "Interesting output")
```


### supress-stdout

Runs the form, but supresses its stdout.

@codeblock[janet]```
(suppress-stdout (print "Hello world!"))
# => nil
```


### supress-stderr

Runs the form, but supresses its stderr.

@codeblock[janet]```
(suppress-stderr (eprint "Hello world!"))
# => nil
```

### assert-docs

Asserts that all public bindings from the environment have docstring, 
when the `path` is required.

@codeblock[janet]```
(assert-doc "/spork/test")
✘  suppress-stderr does not have proper doc
```

## Reference

@gen-docs/gen-prefix-current[test/]

